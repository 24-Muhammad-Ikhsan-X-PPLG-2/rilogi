


SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO ''
    AS $$begin
  insert into public.profiles (id, username, email, bio, avatar_url, rilo_id)
  values (new.id, new.raw_user_meta_data->>'username', new.raw_user_meta_data->>'email', new.raw_user_meta_data->>'bio', new.raw_user_meta_data->>'avatar_url', new.raw_user_meta_data->>'rilo_id');
  return new;
end;$$;


ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."block_kontak" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user" "text",
    "to_user" "text"
);


ALTER TABLE "public"."block_kontak" OWNER TO "postgres";


ALTER TABLE "public"."block_kontak" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."block_kontak_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."kontak" (
    "id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "list_kontak" "jsonb"
);


ALTER TABLE "public"."kontak" OWNER TO "postgres";


COMMENT ON TABLE "public"."kontak" IS 'kontak user cok';



CREATE TABLE IF NOT EXISTS "public"."last_read" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "user_id" "text" NOT NULL,
    "contact_id" "text" NOT NULL,
    "last_read_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."last_read" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."pesan" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "from" "text",
    "to" "text",
    "pesan" "text",
    "delete" boolean DEFAULT false
);


ALTER TABLE "public"."pesan" OWNER TO "postgres";


ALTER TABLE "public"."pesan" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."pesan_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"(),
    "username" "text",
    "email" "text",
    "bio" "text",
    "avatar_url" "text",
    "rilo_id" "text",
    CONSTRAINT "username_length" CHECK (("char_length"("username") >= 3))
);


ALTER TABLE "public"."profiles" OWNER TO "postgres";


ALTER TABLE ONLY "public"."block_kontak"
    ADD CONSTRAINT "block_kontak_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."kontak"
    ADD CONSTRAINT "kontak_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."last_read"
    ADD CONSTRAINT "last_read_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."last_read"
    ADD CONSTRAINT "last_read_user_id_contact_id_key" UNIQUE ("user_id", "contact_id");



ALTER TABLE ONLY "public"."pesan"
    ADD CONSTRAINT "pesan_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_email_key" UNIQUE ("email");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_username_key" UNIQUE ("username");



ALTER TABLE ONLY "public"."kontak"
    ADD CONSTRAINT "kontak_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



CREATE POLICY "Allow insert for auth user" ON "public"."kontak" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Allow update for auth usere" ON "public"."kontak" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);



CREATE POLICY "Enable delete" ON "public"."block_kontak" FOR DELETE TO "authenticated" USING (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."block_kontak" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."last_read" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."pesan" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable read access for all users" ON "public"."block_kontak" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."kontak" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."last_read" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."pesan" FOR SELECT USING (true);



CREATE POLICY "Public profiles are viewable by everyone." ON "public"."profiles" FOR SELECT USING (true);



CREATE POLICY "Users can insert their own profile." ON "public"."profiles" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "id"));



CREATE POLICY "Users can update own profile." ON "public"."profiles" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "id"));



ALTER TABLE "public"."block_kontak" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "enable update for auth users" ON "public"."last_read" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);



ALTER TABLE "public"."kontak" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."last_read" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."pesan" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";






ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."block_kontak";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."kontak";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."last_read";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."pesan";



GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

























































































































































GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";


















GRANT ALL ON TABLE "public"."block_kontak" TO "anon";
GRANT ALL ON TABLE "public"."block_kontak" TO "authenticated";
GRANT ALL ON TABLE "public"."block_kontak" TO "service_role";



GRANT ALL ON SEQUENCE "public"."block_kontak_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."block_kontak_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."block_kontak_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."kontak" TO "anon";
GRANT ALL ON TABLE "public"."kontak" TO "authenticated";
GRANT ALL ON TABLE "public"."kontak" TO "service_role";



GRANT ALL ON TABLE "public"."last_read" TO "anon";
GRANT ALL ON TABLE "public"."last_read" TO "authenticated";
GRANT ALL ON TABLE "public"."last_read" TO "service_role";



GRANT ALL ON TABLE "public"."pesan" TO "anon";
GRANT ALL ON TABLE "public"."pesan" TO "authenticated";
GRANT ALL ON TABLE "public"."pesan" TO "service_role";



GRANT ALL ON SEQUENCE "public"."pesan_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."pesan_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."pesan_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";































RESET ALL;
CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION handle_new_user();


  create policy "Anyone can upload an avatar."
  on "storage"."objects"
  as permissive
  for insert
  to public
with check ((bucket_id = 'avatars'::text));



  create policy "Avatar images are publicly accessible."
  on "storage"."objects"
  as permissive
  for select
  to public
using ((bucket_id = 'avatars'::text));



